{"version":3,"sources":["api/mdbAPI.js","components/Common/LoadMoreBtn/LoadMoreBtn.js","components/Common/DisplayGrid/DisplayGrid.js","components/Common/HeroImage/HeroImage.js","components/Home/elements/SortMenu/SortMenu.js","components/Common/LoadSpinner/LoadSpinner.js","components/Common/Header/Header.js","components/Home/elements/MovieThumb/MovieThumb.js","components/Home/Home.js","components/Movie/elements/Navigation/Navigation.js","utils/currencyUtils.js","components/Movie/elements/Actor/Actor.js","components/Movie/elements/MovieInfo/MovieInfo.js","utils/datetimeUtils.js","components/Movie/Movie.js","components/App/App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","IMAGE_BASE_URL","LoadMoreBtn","_ref","text","onClick","react_default","a","createElement","className","DisplayGrid","header","loading","children","loadMore","isMovies","toUpperCase","map","el","i","key","Common_LoadMoreBtn_LoadMoreBtn","HeroImage","image","title","overview","rating","style","background","concat","SortMenu","state","sortTerm","activeTab","sortBy","e","callback","_this","props","target","value","setState","this","Component","LoadSpinner","Header","timeout","doSearch","event","clearTimeout","setTimeout","react_router_dom","to","src","alt","type","placeholder","onChange","esm","Provider","index_esm","MovieThumb","movieId","movieName","clickable","pathname","Home","movies","heroImage","isLoading","currentPage","totalPages","searchTerm","fetchMovies","endpoint","_this$state","fetch","then","res","json","Object","toConsumableArray","results","Math","floor","random","page","total_pages","searchMovies","sortMovies","console","log","loadMoreMovies","_this$state2","_this$state3","Common_Header_Header","Common_HeroImage_HeroImage","backdrop_path","original_title","vote_average","elements_SortMenu_SortMenu","Common_DisplayGrid_DisplayGrid","elements_MovieThumb_MovieThumb","poster_path","id","Common_LoadSpinner_LoadSpinner","Navigation","convertMoney","money","Intl","NumberFormat","currency","minimumFractionDigits","format","Actor","actor","profile_path","name","character","MovieInfo","movie","directors","actors","time","budget","revenue","hours","minutes","calcTime","length","element","elements_Actor_Actor","Movie","fetchInfo","match","params","status_code","cast","crew","filter","staff","job","localStorage","setItem","JSON","stringify","catch","error","getItem","parse","objectSpread","location","elements_Navigation_Navigation","elements_MovieInfo_MovieInfo","runtime","App","Fragment","react_router","path","component","exact","Boolean","window","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee58ae3a.chunk.js","sourcesContent":["/**\n * See https://developers.themoviedb.org/3/discover/movie-discover for API JSON response\n */\nconst API_KEY = 'ed937d243177d63a4572d52a02afaa8b';\nconst API_URL = 'https://api.themoviedb.org/3/';\n\n\n// Movie images SEE https://developers.themoviedb.org/3/getting-started/images\n// Image URL Format: https://image.tmdb.org/t/p/w500/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/';\n\n// Image backdrop sizes:  w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n\n// Image poster sizes: w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w500';\n\nexport {\n    API_URL,\n        API_KEY,\n        IMAGE_BASE_URL,\n        BACKDROP_SIZE,\n        POSTER_SIZE\n}","import React from 'react';\nimport './LoadMoreBtn.css';\n\n/**\n * Component to load more movies at the end of scroll\n * @param text\n * @param onClick\n * @returns {*}\n * @constructor\n */\nconst LoadMoreBtn = ({ text, onClick }) => (\n    <div className=\"mg-loadmorebtn\" onClick={onClick}>\n        <p>{text}</p>\n    </div>\n)\n\nexport default LoadMoreBtn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LoadMoreBtn from '../LoadMoreBtn/LoadMoreBtn';\nimport './DisplayGrid.css';\n\n/**\n * Component to display movie list and actors list as a grid\n * @param header\n * @param loading\n * @param children\n * @param loadMore\n * @param isMovies\n * @returns {*}\n * @constructor\n */\nconst DisplayGrid = ( { header, loading, children, loadMore, isMovies } ) => {\n    const renderElements = () => {\n        return children.map( ( el, i ) => (\n            <div key={ i } className={ isMovies ? \"mg-grid__element--movies\" : \"mg-grid__element--actors\"}>\n                { el }\n            </div>\n        ) );\n    };\n\n    return (\n        <div className={isMovies ? \"mg-grid__movies\" : \"mg-grid__actors\"}>\n            { isMovies && header && !loading ? null : <h3>{ header.toUpperCase() }</h3> }\n            <div className={isMovies ? \"mg-grid__wrap--movies\" : \"mg-grid__wrap--actors\"}>\n                <div className={isMovies ? \"mg-grid__content--movies\" : \"mg-grid__content--actors\"}>\n                    { renderElements() }\n                    { isMovies ? <LoadMoreBtn text={ \"+\" } onClick={loadMore}/> : null}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nDisplayGrid.propTypes = {\n    loading: PropTypes.bool,\n    children: PropTypes.object,\n    isMovies: PropTypes.bool,\n    sortMovies: PropTypes.func\n};\n\nexport default DisplayGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './HeroImage.css';\n\n/**\n * Component to display movie backdrop, movie title, and overview\n * @param image\n * @param title\n * @param overview\n * @returns {*}\n * @constructor\n */\nconst HeroImage = ( { image, title, overview, rating } ) => {\n    return (\n        <div className={ 'mg-heroimage' }\n             style={ {\n                 background:\n                     `linear-gradient(to bottom, rgba(0,0,0,0) 39%,rgba(0,0,0,0) 41%,rgba(0,0,0,0.65) 100%),\n                      linear-gradient(to left, rgba(0,0,0,0) 45%,rgba(0,0,0,0) 41%,rgba(0,0,0,0.85) 100%),\n                      url('${ image }'), #1c1c1c`\n             } }>\n            <div className={ 'mg-heroimage__content' }>\n                <div className={ 'mg-heroimage__text' }>\n                    {/*Display movie title and overview*/ }\n                    <h1 className={\"mg-heroImage__title\"}>{ title }</h1>\n                    <p className={\"mg-heroImage__overview\"}>{ overview }</p>\n                    <p className={\"mg-heroImage__rating\"}>IMDB rating: {rating}</p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nHeroImage.propTypes = {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    overview: PropTypes.string,\n    rating: PropTypes.string\n};\n\nexport default HeroImage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './SortMenu.css';\n\n/**\n * SortMenu component to sort movies list by Most Popular - Top Rated - Now Playing\n * Methods: sortBy\n */\nclass SortMenu extends Component {\n    state = {\n        sortTerm: '',\n        activeTab: 'popular'\n    };\n\n    sortBy = ( e ) => {\n        // Get callback function from props <= Props\n        const { callback } = this.props;\n        if( e.target.value === 1 ) {\n            this.setState( { sortTerm: 'popular' }, () => {\n                callback( this.state.sortTerm );\n                // Set active tab\n                this.setState( { activeTab: 'popular' } );\n            } );\n        } else if( e.target.value === 2 ) {\n            this.setState( { sortTerm: 'now_playing' }, () => {\n                callback( this.state.sortTerm );\n                // Set active tab\n                this.setState( { activeTab: 'now_playing' } );\n            } );\n        } else {\n            this.setState( { sortTerm: 'top_rated' }, () => {\n                callback( this.state.sortTerm );\n                // Set active tab\n                this.setState( { activeTab: 'top_rated' } );\n            } );\n        }\n    };\n\n    render() {\n        return (\n            <div className={ 'mg-navigation__sort-menu--wrap' }>\n                <ul className={ 'mg-navigation__sort-menu' }>\n                    <li className={ `mg-navigation__sort-menu--item ${ this.state.activeTab === 'popular' ? ' active' : null }` }\n                        onClick={ this.sortBy } value={ '1' }>\n                        Most Popular\n                    </li>\n                    <li className={ `mg-navigation__sort-menu--item ${ this.state.activeTab === 'now_playing' ? ' active' : null }` }\n                        onClick={ this.sortBy } value={ '2' }>\n                        Now Playing\n                    </li>\n                    <li className={ `mg-navigation__sort-menu--item ${ this.state.activeTab === 'top_rated' ? ' active' : null }` }\n                        onClick={ this.sortBy } value={ '3' }>\n                        Top Rated\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nSortMenu.propTypes = {\n    callback: PropTypes.func\n};\nexport default SortMenu;","import React from 'react';\nimport './LoadSpinner.css';\n\n/**\n * Spinner component for when loading\n * @returns {*}\n * @constructor\n */\nconst LoadSpinner = () => {\n    return (\n        <div className=\"spinner\">\n        </div>\n    );\n};\n\nexport default LoadSpinner;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FaSearch } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\n\n/**\n * Home header component\n * Methods: doSearch\n */\nclass Header extends Component {\n    state = {\n        value: ''\n    };\n// Must have this here so we can reset it\n    timeout = null;\n\n    doSearch = ( event ) => {\n        // Get callback function from props <= Props\n        const { callback } = this.props;\n        // Set component state to user input\n        this.setState( { value: event.target.value } );\n        // reset the timeout before each occurrence\n        clearTimeout( this.timeout );\n        // Set timeout to fire search after user is done typing\n        this.timeout = setTimeout( () => {\n            callback( this.state.value );\n        }, 700 );\n    };\n\n    render() {\n        const { value } = this.state;\n        return (\n            <div className=\"mg-header\">\n                <div className=\"mg-header-content\">\n                    <Link to={ '/' }>\n                        <img className=\"mg-logo\" src=\"./images/moviegoers.png\" alt=\"moviegoers.logo\"/>\n                    </Link>\n                    <div className={\"mg-header__wrap--input\"}>\n                        <input\n                            type=\"text\"\n                            className=\"mg-header__input\"\n                            placeholder=\"Search\"\n                            onChange={ this.doSearch }\n                            value={ value }\n                        />\n                        <IconContext.Provider value={ { className: 'mg-header__icon--search' } }>\n                            <div>\n                                <FaSearch/>\n                            </div>\n                        </IconContext.Provider>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nHeader.propTypes = {\n    callback: PropTypes.func\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieThumb.css';\n\n/**\n * Movie Thumbnail component to show movie poster\n * @param image\n * @param movieId\n * @param movieName\n * @param clickable\n * @returns {*}\n * @constructor\n */\nconst MovieThumb = ( { image, movieId, movieName, clickable } ) => (\n    <div className=\"mg-moviethumb\">\n        { clickable ?\n            <Link to={ { pathname: `/${ movieId }`, movieName: `${ movieName }` } }>\n                <img className=\"clickable\" src={ image } alt=\"moviethumb\"/>\n            </Link>\n            :\n            <img src={ image } alt={ `${ movieName }` }/>\n        }\n    </div>\n);\n\nMovieThumb.propTypes = {\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    movieName: PropTypes.string,\n    clickable: PropTypes.bool\n};\n\nexport default MovieThumb;","import React, { Component } from 'react';\nimport {\n    API_URL,\n    API_KEY,\n    IMAGE_BASE_URL,\n    BACKDROP_SIZE,\n    POSTER_SIZE\n} from '../../api/mdbAPI';\n/* Components */\n/* Styles */\nimport './Home.css';\nimport DisplayGrid from '../Common/DisplayGrid/DisplayGrid';\nimport HeroImage from '../Common/HeroImage/HeroImage';\nimport SortMenu from './elements/SortMenu/SortMenu';\nimport LoadSpinner from '../Common/LoadSpinner/LoadSpinner';\nimport Header from '../Common/Header/Header';\nimport MovieThumb from '../Home/elements/MovieThumb/MovieThumb';\n\n/**\n * Class Component: Home\n * Description:\n *  -   Includes all els of the home page:\n *  -   Loads first\n *  -   API JSON format https://developers.themoviedb.org/3/discover/movie-discover\n * State:\n * Methods:\n *  componentDidMount: fetch data from API\n */\nclass Home extends Component {\n    // Collect API response into state\n    state = {\n        movies: [],\n        heroImage: null,\n        isLoading: false,\n        // API results is devided into pages\n        currentPage: 0,\n        totalPages: 0,\n        searchTerm: '',\n        sortTerm: ''\n    };\n\n    /**\n     * Lifecycle method for when home component has mounted\n     */\n    componentDidMount() {\n        // Set isLoading state to true\n        this.setState( { isLoading: true } );\n        // Fetch data from API URL\n        const endpoint = `${ API_URL }movie/popular?api_key=${ API_KEY }&language=en-US&page=1`;\n        this.fetchMovies( endpoint );\n    }\n\n    /**\n     * Method to fetch movie from tmdb API\n     * set state of component from response\n     * */\n    fetchMovies = ( endpoint ) => {\n        const { movies, heroImage, searchTerm } = this.state;\n        fetch( endpoint )\n            .then( res => res.json() )\n            .then( res => {\n                this.setState( {\n                                   // copy current movies and add new results with spread\n                                   movies: [...movies, ...res.results],\n                                   // set heroimage to first result check if exist first\n                                   heroImage: res.results[Math.floor(Math.random() * 16)],\n                                   loading: false,\n                                   currentPage: res.page,\n                                   totalPages: res.total_pages\n                               } );\n            } );\n    };\n    /**\n     *   Method to perform search on the API\n     *   set search result to most popular items (default) if search term is empty\n     *  */\n    searchMovies = ( searchTerm ) => {\n        let endpoint = '';\n        this.setState( {\n                           movies: [],\n                           loading: true, // Shows loading spinner\n                           searchTerm\n                       } );\n        if( searchTerm === '' ) {\n            endpoint = `${ API_URL }movie/popular?api_key=${ API_KEY }&language=en-US&page=1`;\n        } else {\n            endpoint = `${ API_URL }search/movie?api_key=${ API_KEY }&language=en-US&query=${ searchTerm }`;\n        }\n        this.fetchMovies( endpoint );\n    };\n\n    sortMovies = ( sortTerm ) => {\n        this.setState( {\n                           movies: [],\n                           loading: true,\n                           sortTerm\n                       } );\n        console.log(sortTerm);\n        const endpoint = `${ API_URL }movie/${ sortTerm }?api_key=${ API_KEY }&language=en-US&page=1`;\n        const { heroImage } = this.state;\n        fetch( endpoint )\n            .then( res => res.json() )\n            .then( res => {\n                this.setState( {\n                                   // copy current movies and add new results with spread\n                                   movies: [...res.results],\n                                   // set heroimage to first result check if exist first\n                                   heroImage: res.results[Math.floor(Math.random() * 16)],\n                                   loading: false,\n                                   currentPage: res.page,\n                                   totalPages: res.total_pages\n                               } );\n            } );\n    };\n\n    loadMoreMovies = () => {\n        const { searchTerm, currentPage } = this.state;\n        let endpoint = '';\n        this.setState( { loading: false } );\n        // Load more popular movies IF no searchterm\n        if( searchTerm === '' ) {\n            endpoint = `${ API_URL }movie/popular?api_key=${ API_KEY }&language=en-US&page=${ currentPage + 1 }`;\n            // Else load more search results\n        } else {\n            endpoint = `${ API_URL }search/movie?api_key=${ API_KEY }&language=en-US&query=${ searchTerm }&page=${ currentPage + 1 }`;\n        }\n        this.fetchMovies( endpoint );\n    };\n\n    render() {\n        const { movies, heroImage, loading, searchTerm } = this.state;\n        return (\n            <div className={ 'mg-home' }>\n                <Header callback={ this.searchMovies }/>\n                {/* Check if heroimage has been loaded/exist */ }\n                { heroImage ?\n                    <div>\n                        <HeroImage\n                            image={ `${ IMAGE_BASE_URL }${ BACKDROP_SIZE }${ heroImage.backdrop_path }` }\n                            title={ heroImage.original_title }\n                            overview={ heroImage.overview }\n                            rating={ heroImage.vote_average + ' / 10' }\n                        />\n                    </div> : null }\n                <div className={ 'mg-home__grid' }>\n                    <SortMenu callback={ this.sortMovies }/>\n                    <DisplayGrid header={ '' } loading={ loading } loadMore={ this.loadMoreMovies } isMovies={ true }>\n                        { movies.map( ( el, i ) => (\n                            <MovieThumb\n                                key={ i }\n                                clickable={ true }\n                                image={ el.poster_path ? `${ IMAGE_BASE_URL }${ POSTER_SIZE }${ el.poster_path }` : './images/no_image.jpg' }\n                                movieId={ el.id }\n                                movieName={ el.original_title }\n                            />\n                        ) ) }\n                    </DisplayGrid>\n                </div>\n                { loading ? <LoadSpinner/> : null }\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport './Navigation.css';\n\nconst Navigation = () => (\n    <div className=\"mg-navigation\">\n        <div className=\"mg-navigation-content\">\n            <Link to=\"/\">\n                <p className={\"mg-navigation__back\"}><FaArrowLeft/> Home</p>\n            </Link>\n        </div>\n    </div>\n);\n\nexport default Navigation;","// Convert a number to money formatting\nexport const convertMoney = ( money ) => {\n    const formatter = new Intl.NumberFormat( 'en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0\n    } );\n    return formatter.format( money );\n};","import React from 'react';\nimport { IMAGE_BASE_URL } from '../../../../api/mdbAPI';\nimport PropTypes from 'prop-types';\nimport './Actor.css';\n\n/**\n * Actor card info component\n * @param actor\n * @returns {*}\n * @constructor\n */\nconst Actor = ( { actor } ) => {\n\n    const POSTER_SIZE = 'w154';\n\n    return (\n        <div className=\"mg-actor clearfix\">\n            <img\n                src={ actor.profile_path ? `${ IMAGE_BASE_URL }${ POSTER_SIZE }${ actor.profile_path }` : './images/no_image.jpg' }\n                alt={actor.name}\n            />\n            <div className={\"mg-wrap__actor-info\"}>\n                <span className=\"mg-actor-name\">{ actor.name }</span>\n                <span className=\"mg-actor-character\">{ actor.character }</span>\n            </div>\n        </div>\n    );\n};\n\n// Set prop types for Actor\nActor.propTypes = {\n    actor: PropTypes.object\n};\n\nexport default Actor;","import React from 'react';\nimport { IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE } from '../../../../api/mdbAPI';\nimport PropTypes from 'prop-types';\nimport DisplayGrid from '../../../Common/DisplayGrid/DisplayGrid';\nimport { calcTime } from '../../../../utils/datetimeUtils';\nimport { convertMoney } from '../../../../utils/currencyUtils';\nimport './MovieInfo.css';\nimport Actor from '../Actor/Actor';\n\n/**\n * Component to display movie info on the movie page\n * @param movie\n * @param directors\n * @param actors\n * @param time\n * @param budget\n * @param revenue\n * @returns {*}\n * @constructor\n */\nconst MovieInfo = ( { movie, directors, actors, time, budget, revenue } ) => (\n    <div className=\"mg-movieinfo\"\n         style={ {\n             background: movie.backdrop_path ? `url('${ IMAGE_BASE_URL }${ BACKDROP_SIZE }${ movie.backdrop_path }')` : '#000'\n         } }\n    >\n        <div className=\"mg-movieinfo__content\">\n            <div className=\"mg-movieinfo__thumb\">\n                <img src={ movie.poster_path ? `${ IMAGE_BASE_URL }${ POSTER_SIZE }${ movie.poster_path }`\n                    : './images/no_image.jpg' } alt={ `${ movie.name }` }/>\n            </div>\n            <div className=\"mg-movieinfo__text\">\n                <h1>{ movie.title }</h1>\n                <span className=\"mg-movieinfobar__info\">Running time: { calcTime( time ) } </span>\n                <span className=\"mg-movieinfobar__info\">Budget: { convertMoney( budget ) } </span>\n                <span className=\"mg-movieinfobar__info\">Revenue: { convertMoney( revenue ) } </span>\n                <span className=\"mg-movieinfobar__info\">IMDB Rating: { movie.vote_average + ' / 10' } </span>\n                <h3>PLOT</h3>\n                <p>{ movie.overview }</p>\n                { directors.length > 1 ? <h3>DIRECTORS</h3> : <h3>DIRECTOR</h3> }\n                { directors.map( ( element, i ) => {\n                    return <p key={ i } className=\"mg-director\">{ element.name }</p>;\n                } ) }\n                { actors ?\n                    <div className=\"mg-movie__grid\">\n                        <DisplayGrid header={ 'Actors' }>\n                            { actors.map( ( el, i ) => (\n                                <Actor key={ i } actor={ el }/>\n                            ) ) }\n                        </DisplayGrid>\n                    </div>\n                    : null\n                }\n\n            </div>\n        </div>\n    </div>\n);\n\nMovieInfo.propTypes = {\n    movie: PropTypes.object,\n    directors: PropTypes.array,\n    actors: PropTypes.object,\n    time: PropTypes.string,\n    budget: PropTypes.string,\n    revenue: PropTypes.string\n};\n\nexport default MovieInfo;","// Convert time to hours and minutes\nexport const calcTime = ( time ) => {\n    const hours = Math.floor( time / 60 );\n    const minutes = time % 60;\n    return `${ hours }h ${ minutes }m`;\n};","import React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../api/mdbAPI';\nimport Navigation from './elements/Navigation/Navigation';\nimport MovieInfo from './elements/MovieInfo/MovieInfo';\nimport LoadSpinner from '../Common/LoadSpinner/LoadSpinner';\n/*Styles*/\nimport './Movie.css';\n\n/**\n * Movie page component\n * Methods: componentDidMount - fetchInfo -\n */\nclass Movie extends Component {\n    state = {\n        movie: null,\n        actors: null,\n        directors: [],\n        loading: false\n    };\n\n    /**\n     * Method to manage state and to call fetchInfo function\n     */\n    componentDidMount() {\n        // ES6 destructuring the props\n        const { movieId } = this.props.match.params;\n\n        if( localStorage.getItem( `${ movieId }` ) ) {\n            let state = JSON.parse( localStorage.getItem( `${ movieId }` ) );\n            this.setState( { ...state } );\n        } else {\n            this.setState( { loading: true } );\n            // First fetch the movie ...\n            let endpoint = `${ API_URL }movie/${ movieId }?api_key=${ API_KEY }&language=en-US`;\n            this.fetchInfo( endpoint );\n        }\n    }\n\n    /**\n     * Method to fetch API response and set component state\n     * @param endpoint: API URL\n     */\n    fetchInfo = ( endpoint ) => {\n        // ES6 destructuring the props\n        const { movieId } = this.props.match.params;\n\n        fetch( endpoint )\n            .then( res => res.json() )\n            .then( res => {\n\n                if( res.status_code ) {\n                    // If we don't find any movie\n                    this.setState( { loading: false } );\n                } else {\n                    this.setState( { movie: res }, () => {\n                        // ... then fetch actors in the setState callback function\n                        let endpoint = `${ API_URL }movie/${ movieId }/credits?api_key=${ API_KEY }`;\n                        fetch( endpoint )\n                            .then( res => res.json() )\n                            .then( res => {\n                                console.log(res.cast);\n                                const directors = res.crew.filter( ( staff ) => staff.job === 'Director' );\n                                this.setState( {\n                                                   actors: res.cast,\n                                                   directors,\n                                                   loading: false\n                                               }, () => {\n                                    localStorage.setItem( `${ movieId }`, JSON.stringify( this.state ) );\n                                } );\n                            } );\n                    } );\n                }\n            } )\n            .catch( error => console.error( 'Error:', error ) );\n    };\n\n    render() {\n        const { movieName } = this.props.location;\n        const { movie, directors, actors, loading } = this.state;\n        return (\n            <div className=\"mg-movie\">\n                <Navigation movie={ movieName }/>\n                { movie ?\n                    <div>\n                        <MovieInfo movie={ movie } directors={ directors } actors={actors} time={ movie.runtime } budget={ movie.budget } revenue={ movie.revenue }/>\n                    </div>\n                    : null }\n                { !actors && !loading ? <h1>No movie found</h1> : null }\n                { loading ? <LoadSpinner/> : null }\n            </div>\n        );\n    }\n}\n\nexport default Movie;","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../Home/Home';\nimport Movie from '../Movie/Movie'\nimport './App.css';\n\nfunction App() {\n    return (\n        <HashRouter>\n            <React.Fragment>\n                <Switch>\n                    <Route path=\"/\" component={ Home } exact/>\n                    <Route path=\"/:movieId\" component={ Movie } exact/>\n                </Switch>\n            </React.Fragment>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}